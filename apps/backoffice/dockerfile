FROM node:20-alpine AS base
RUN apk add --no-cache python3 make g++ gcc libc-dev linux-headers libc6-compat

FROM base AS builder
WORKDIR /app
ARG APP_FOLDER=backoffice
# Use the build-time variable to set an environment variable
ENV APP_FOLDER=${APP_FOLDER}
RUN echo -e "\e[1;33mBuilding application ${APP_FOLDER}\e[0m"
RUN npm install -g turbo
COPY . .
RUN turbo prune --scope=@app/${APP_FOLDER} --docker

FROM base as installer
WORKDIR /app

RUN npm install -g pnpm husky turbo pm2

ARG TURBO_TEAM
ARG TURBO_TOKEN

ENV TURBO_TEAM=$TURBO_TEAM
ENV TURBO_TOKEN=$TURBO_TOKEN
ENV CI         true
ENV SKIP_ENV_VALIDATION true

# Set environment variables for application

ARG POSTGRES_URL
ARG BLOB_STORAGE_URL
ARG BLOB_READ_WRITE_TOKEN
ARG KV_URL
ARG KV_REST_API_URL
ARG BLOB_READ_WRITE_TOKEN
ARG KV_REST_API_READ_ONLY_TOKEN
ARG EDGE_CONFIG
ARG AUTH_SECRET
ARG NEXT_PUBLIC_AUTH_DESCOPE_ID
ARG AUTH_DESCOPE_SECRET
ARG AUTH_DESCOPE_ISSUER
ARG AUTH_DESCOPE_MGT_KEY
ARG AUTH_DESCOPE_MAIN_TENANT_ID
ARG DEBUG_DOCKER_MODE

ENV DEBUG_DOCKER_MODE=${DEBUG_DOCKER_MODE}
RUN \
if [[ -z "${DEBUG_DOCKER_MODE}" ]]; then \
  echo -e "\e[1;33mDEBUG_DOCKER_MODE is not set\e[0m"; \
else \
  echo -e "\e[1;33mDEBUG_DOCKER_MODE is set to ${DEBUG_DOCKER_MODE}\e[0m"; \
  echo -e "\e[1;33mENVIRONMENT VARIABLES\e[0m"; \
  env; \
fi

ENV POSTGRES_URL=${POSTGRES_URL}
ENV BLOB_STORAGE_URL=${BLOB_STORAGE_URL}
ENV KV_URL=${KV_URL}
ENV KV_REST_API_URL=${KV_REST_API_URL}
ENV KV_REST_API_TOKEN=${KV_REST_API_TOKEN}
ENV KV_REST_API_READ_ONLY_TOKEN=${KV_REST_API_READ_ONLY_TOKEN}
ENV EDGE_CONFIG=${EDGE_CONFIG}
ENV AUTH_SECRET=${AUTH_SECRET}
ENV NEXT_PUBLIC_AUTH_DESCOPE_ID=${NEXT_PUBLIC_AUTH_DESCOPE_ID}
ENV AUTH_DESCOPE_SECRET=${AUTH_DESCOPE_SECRET}
ENV AUTH_DESCOPE_ISSUER=${AUTH_DESCOPE_ISSUER}
ENV AUTH_DESCOPE_MGT_KEY=${AUTH_DESCOPE_MGT_KEY}
ENV AUTH_DESCOPE_MAIN_TENANT_ID=${AUTH_DESCOPE_MAIN_TENANT_ID}
# First install dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml

# Build the project and its dependencies
COPY --from=builder /app/out/full/ .
RUN pnpm install --frozen-lockfile
CMD ["sh", "-c", "pnpm turbo build --filter=@app/${APP_FOLDER}"]

FROM base AS runner
WORKDIR /app

EXPOSE 3001
ENV PORT 3001

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

CMD ["sh", "-c", "cp /app/apps/${APP_FOLDER}/next.config.mjs . && \
              cp /app/apps/${APP_FOLDER}/package.json . && \
              cp -r /app/apps/${APP_FOLDER}/.next/standalone ./ && \
              cp -r /app/apps/${APP_FOLDER}/.next/static ./apps/${APP_FOLDER}/.next/static && \
              cp -r /app/apps/${APP_FOLDER}/public ./apps/${APP_FOLDER}/public"]

# Create a PM2 ecosystem file
CMD ["sh", "-c", "echo '{ \
  \"apps\": [{ \
    \"name\": \"${APP_FOLDER}-app\", \
    \"script\": \"apps/${APP_FOLDER}/server.js\", \
    \"instances\": \"max\", \
    \"exec_mode\": \"cluster\", \
    \"autorestart\": true, \
    \"watch\": false, \
    \"max_memory_restart\": \"1G\", \
    \"env\": { \
      \"NODE_ENV\": \"production\" \
    } \
  }] \
}' > ecosystem.config.json"]

# Use PM2 to start the application
CMD ["pm2-runtime", "node .next/standalone/server.js", "ecosystem.config.json"]
