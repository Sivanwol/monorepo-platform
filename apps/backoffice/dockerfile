FROM node:20-alpine AS base
RUN apk add python3 make g++ gcc libc-dev linux-headers libc6-compat
RUN npm install -g turbo
RUN corepack enable
RUN corepack prepare pnpm@9.9.0 --activate

FROM base AS builder
WORKDIR /app
RUN echo -e "\e[1;33mInstall globally packages for application backoffice\e[0m"
COPY . .
RUN turbo prune --scope=@app/backoffice --docker

FROM base AS installer
WORKDIR /app
RUN echo -e "\e[1;33mWired environment variables for application backoffice\e[0m"
ARG TURBO_TEAM
ARG TURBO_TOKEN

ENV TURBO_TEAM $TURBO_TEAM
ENV TURBO_TOKEN $TURBO_TOKEN
ENV CI         true
ENV SKIP_ENV_VALIDATION true

# Set environment variables for application

ARG POSTGRES_URL
ARG BLOB_STORAGE_URL
ARG BLOB_READ_WRITE_TOKEN
ARG KV_URL
ARG KV_REST_API_URL
ARG BLOB_READ_WRITE_TOKEN
ARG KV_REST_API_READ_ONLY_TOKEN
ARG EDGE_CONFIG
ARG AUTH_SECRET
ARG NEXT_PUBLIC_AUTH_DESCOPE_ID
ARG AUTH_DESCOPE_SECRET
ARG AUTH_DESCOPE_ISSUER
ARG AUTH_DESCOPE_MGT_KEY
ARG AUTH_DESCOPE_MAIN_TENANT_ID
ARG NEXT_PUBLIC_BETTER_LOGS_TOKEN

ENV POSTGRES_URL ${POSTGRES_URL}
ENV BLOB_STORAGE_URL ${BLOB_STORAGE_URL}
ENV KV_URL ${KV_URL}
ENV KV_REST_API_URL ${KV_REST_API_URL}
ENV KV_REST_API_TOKEN ${KV_REST_API_TOKEN}
ENV KV_REST_API_READ_ONLY_TOKEN ${KV_REST_API_READ_ONLY_TOKEN}
ENV EDGE_CONFIG ${EDGE_CONFIG}
ENV AUTH_SECRET ${AUTH_SECRET}
ENV NEXT_PUBLIC_AUTH_DESCOPE_ID ${NEXT_PUBLIC_AUTH_DESCOPE_ID}
ENV AUTH_DESCOPE_SECRET ${AUTH_DESCOPE_SECRET}
ENV AUTH_DESCOPE_ISSUER ${AUTH_DESCOPE_ISSUER}
ENV AUTH_DESCOPE_MGT_KEY ${AUTH_DESCOPE_MGT_KEY}
ENV AUTH_DESCOPE_MAIN_TENANT_ID ${AUTH_DESCOPE_MAIN_TENANT_ID}
ENV NEXT_PUBLIC_BETTER_LOGS_TOKEN ${NEXT_PUBLIC_BETTER_LOGS_TOKEN}

RUN echo -e "\e[1;33mENVIRONMENT VARIABLES\e[0m";
# Create a .env file with all the environment variables but CI
RUN env >> .env
RUN cat .env

RUN echo -e "\e[1;33mBuilding application backoffice\e[0m"
# First install dependencies (as they change less often)
COPY --from=builder /app/out/json .
COPY --from=builder /app/out/pnpm-lock.yaml ./
COPY --from=builder /app/out/full .
RUN pnpm install
RUN pnpm build --filter=@app/backoffice

FROM base AS runner
WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED 1
# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs
# COPY --from=installer --chown=nextjs:nodejs /app/apps/backoffice/.next/standalone /app/apps/backoffice
COPY --from=installer /app/apps/backoffice/next.config.mjs .
COPY --from=installer /app/apps/backoffice/package.json .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing

COPY --from=installer --chown=nextjs:nodejs /app/apps/backoffice/.next  ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/backoffice/.next/standalone  ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/backoffice/.next/static  ./standalone/apps/backoffice/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/backoffice/public ./standalone/apps/backoffice/public
COPY --from=installer /app/.env .
RUN ls -la ./standalone/apps/backoffice

RUN echo -e "\e[1;33mRunning application backoffice\e[0m"
EXPOSE 3000
ENV PORT 3000
CMD ["sh", "-c", "node --experimental-modules ./standalone/apps/backoffice/server.js"]
RUN echo -e "\e[1;33mApplication backoffice is running deployment done\e[0m"
